#!/usr/bin/env python
# coding: utf-8

# In[1]:


#libraries we will use
import pandas as pd 
import numpy as np
import seaborn as sns
import matplotlib.pyplot as plt 


# In[2]:


#reading the file
sales_file = pd.read_csv('.\Downloads\super_market_sales.csv')
sales_file.head()


# In[ ]:


#Explanation of the columns
"""
Invoice id = identification number bill of sale invoice generated by computer

Branch = Supercenter Branch has 3 branches identified by A, B and C).

City = City: Location of supercenters

Customer type = Type of customers, registered by Socios for customers with a credit card 
member and Normal for without membership card.

Gender = Client gender type

Product line = General groups Item categorization: Electronic accessories 
= electronic accessories, Fashion accessories = accessories fashion, Food and beverages = food and beverages, Health
and beauty = health and beauty, Home and lifestyle = home and lifestyle, Sports and travel = sports and travel

Unit Price = Price of each product in $

Quantity = Number of products purchased by the client

Tax = 5% tax rate for purchase of the client

Total = Total price taxes included

Date = Date of purchase (Record available from January to March)

Time = Purchase time (10am to 9pm)

Payment = payment used by the client for the purchase (3 methods are available: cash, credit card)
credit and electronic wallet)

COGS: cost of goods sold

Gross margin percentage = Gross margin percentage

Gross income = Gross income

Rating = stratification rating of the customer in their overall shopping experience (in a scale from 1 to 10)

"""


# In[393]:


# We are seeing the number of rows and columns
sales_file.shape


# In[394]:


#checking for duplicate values
sales_file.duplicated().any()


# In[395]:


#With ".info()" we have a description of each column, the name, the number of rows (not counting null values)
#and the data type of each column
sales_file.info()


# In[402]:


#here we are going to convert the data type of the "Date" and "Time" columns to date and time, we will use "pd.to_datetime" for that
sales_file['Date'] = pd.to_datetime(sales_file['Date'])
sales_file['Time'] = pd.to_datetime(sales_file['Time'])


# In[397]:


#we can check here that the data type conversion of "Date" and "Time" was successful
sales_file.dtypes


# In[403]:


#we are creating new columns "day", "month", "year" and "hour"
sales_file['day'] = (sales_file['Date']).dt.day_name()
sales_file['month'] = (sales_file['Date']).dt.month
sales_file['year'] = (sales_file['Date']).dt.year
sales_file['hour'] = (sales_file['Time']).dt.hour


# In[404]:


sales_file.head()


# In[405]:


#we can see here what values the 'month' column has
sales_file['month'].unique()


# In[406]:


#We are changing the values of each month value by its name
sales_file['month'].replace({1:'January', 2:'February', 3:'March'}, inplace=True)
sales_file['month'].unique()


# In[407]:


#a quick statistical overview of numeric columns
sales_file.describe()


# In[408]:


# we are seeing the number of null values in each column}
sales_file.isnull().sum()


# In[409]:


#checking the number of non-repeating values in each column
sales_file.nunique()


# In[410]:


#number of clients of each gender
sales_file['Gender'].value_counts()


# In[411]:


plt.figure(figsize=(10, 6))
sns.countplot(x='Gender', data=sales_file).set_title("Number of clients by gender")


# In[412]:


#checking the number of customers in each branch
sales_file['Branch'].value_counts()


# In[413]:


plt.figure(figsize=(10, 6))
sns.countplot(x='Branch', data= sales_file).set_title("Number of clients in each Branch")


# In[414]:


#checking the number of customers in each City
sales_file['City'].value_counts()


# In[415]:


plt.figure(figsize=(10, 6))
sns.countplot(x='City', data=sales_file).set_title('Number of clients in each city')


# In[416]:


#Number of clients in each city categorized by branch
sales_file.groupby(['City', 'Branch']).agg(amount=('Invoice ID', 'count'))


# In[417]:


plt.figure(figsize=(10, 6))
sns.countplot(x='City', hue='Branch', data=sales_file).set_title('Number of clients in each city categorized by branch')
plt.xlabel('City')
plt.ylabel('Count')
plt.show()


# In[418]:


#Consultation of the quantity of each type of client
sales_file['Customer type'].value_counts()


# In[419]:


plt.figure(figsize=(10, 6))
sns.countplot(x='Customer type', data=sales_file).set_title('Number of each type of customer')


# In[420]:


#Average rating of each product line
sales_rating_avg = pd.DataFrame(sales_file.groupby('Product line')['Rating'].mean())
sales_rating_avg


# In[421]:


sales_rating_avg = sales_rating_avg.reset_index()
plt.figure(figsize=(10, 6))
plt.xticks(rotation=90)
sns.barplot(x='Product line', y='Rating', data=sales_rating_avg).set_title('Average rating for each product line')


# In[422]:


#Number of customers who buy each product line
sales_file['Product line'].value_counts()


# In[423]:


plt.figure(figsize=(10, 6))
#We use xtics(rotation=90) to rotate the name of the categories 90 degrees so they don't get mixed up
plt.xticks(rotation=90)
sns.countplot(x='Product line', data=sales_file).set_title('Number of customers who buy each product line')


# In[424]:


#Number of clients per month
sales_file['month'].value_counts()


# In[425]:


plt.figure(figsize=(10, 6))
sns.countplot(x='month', data=sales_file).set_title('Number of clients per month')


# In[426]:


#Number of clients per day
sales_file['day'].value_counts()


# In[427]:


plt.figure(figsize=(10, 6))
sns.countplot(x='day', data=sales_file).set_title('Number of clients per day')


# In[428]:


#Number of clients per hour
sales_file['hour'].value_counts()


# In[429]:


plt.figure(figsize=(10, 6))
sns.countplot(x='hour', data=sales_file).set_title('Number of clients per hour')


# In[ ]:


#Summary
"""
Times are rounded (10:00 a.m. - 10:59 a.m.) = 10 a.m., (11:0 a.m. - 11:59 a.m.) = 11 a.m., ...
1. The number of clients of each gender is very balanced
2. "A" branch is located in "Yangon", "B" is
in "Mandalay" and the "C" is in "Naypyitaw"
3. Of all the branches, the one with the most customers in this period of 3 months was the "A", but they all have an amount
very similar
4. The number of clients who are members and those who are not fairly balanced
5. The product line that stood out the most was accessories fashion, followed by food and drinks, and third the
electronic accessories
6. The product line that stood out the least was health And beauty
7. On average, the product line that is most accepted had was the food and drinks, followed by accessories of
fashion, very equal with health and beauty products
8. The least accepted product line in product was home and lifestyle
9. The month with the most clients was: January
10. The month with the fewest clients was: February
11. The days that most customers went shopping were: saturday and tuesday
12. The days that fewer customers went shopping were: monday and sunday
13. The hours that most customers went shopping were (Top 3): 7:00 p.m., 1:00 p.m., 3:00 p.m.
(very even with 10 o'clock)
14. The hours that most customers went shopping were (Top 3): 5:00 p.m., 8:00 p.m., 4:00 p.m.
"""


# In[430]:


#Consult the amount of each type of customer grouped by gender
sales_file.groupby(['Customer type', 'Gender']).agg(amount=('Invoice ID', 'count'))


# In[431]:


plt.figure(figsize=(10, 6))
sns.countplot(x='Customer type', hue='Gender', data=sales_file).set_title('Quantity of each type of customer grouped by gender')


# In[432]:


#Number of customers who bought each line of products grouped by gender
sales_file.groupby(['Product line', 'Gender']).agg(amount=('Invoice ID', 'count'))


# In[433]:


plt.figure(figsize=(10, 6))
plt.xticks(rotation=90)
sns.countplot(x='Product line', hue='Gender', data=sales_file).set_title('Number of customers who bought each product line grouped by gender')


# In[434]:


#Number of customers who buy each line of products grouped by type of Customer
sales_file.groupby(['Product line', 'Customer type']).agg(amount=('Invoice ID', 'count'))


# In[435]:


plt.figure(figsize=(10, 6))
plt.xticks(rotation=90)
sns.countplot(x='Product line', hue='Customer type', data=sales_file).set_title('Number of customers who buy each line of products grouped by type of customer')


# In[436]:


#Number of customers of each gender per month
sales_file.groupby(['month', 'Gender']).agg(amount=('Invoice ID', 'count'))


# In[437]:


plt.figure(figsize=(10, 6))
sns.countplot(x='month',hue='Gender', data=sales_file).set_title('Number of clients of each gender per month')


# In[438]:


#Number of customers of each gender per day
sales_file.groupby(['day', 'Gender']).agg(amount=('Invoice ID', 'count'))


# In[439]:


plt.figure(figsize=(10,6))
sns.countplot(x='day',hue='Gender', data=sales_file).set_title('Number of customers of each gender per day')


# In[440]:


#Number of customers of each gender per hour
sales_file.groupby(['hour', 'Gender']).agg(amount=('Invoice ID', 'count'))


# In[441]:


plt.figure(figsize=(10,6))
sns.countplot(x='hour',hue='Gender', data=sales_file).set_title('Number of customers of each gender per hour')


# In[37]:


#Summary
"""
1. Women are considerably more likely to choose to be members than men
2. Women chose significantly more fashion products, as well as sports and travel
3. Men preferred much more than women for health and beauty products
4. Customers without membership compared to those with yes they are, they choose much more (greater than 10 units)
electronic accessories
5. There is a big difference in the food industry and drinks in the members (being greater than 10 units) in
comparison to those who are not
6. Women shopped more in the month of January, on the contrary, men did it in March
7. Women shopped less in the month of March
and men in february
8. Women went shopping more on Saturdays and Tuesday (the same amount) and men on Wednesday
(very even with Saturdays)
9. Women shopped less on Wednesday (very even with Thursdays) and men on Mondays
10. Women went shopping more at 10 o'clock (very around 1:00 p.m.) and men at 3:00 p.m. (quite
equal to 7:00 p.m.)
11. Women went shopping less at 8pm and men men at 5 pm
"""


# In[442]:


#Number of sales by product line
sales_file_2= pd.DataFrame(sales_file.groupby('Product line')['Quantity'].sum())
sales_file_2


# In[443]:


#We need to reset the index of the new dataset to avoid errors when trying to graph
sales_file_2 = sales_file_2.reset_index()
plt.figure(figsize=(10, 6))
plt.xticks(rotation=90)
sns.barplot(x='Product line', y='Quantity', data=sales_file_2).set_title('Number of sales by product line')


# In[444]:


#Number of customers using each type of payment method
sales_file['Payment'].value_counts()


# In[445]:


plt.figure(figsize=(10, 6))
sns.countplot(x='Payment', data=sales_file).set_title('Number of customers using each type of payment method')


# In[447]:


#Number of customers who use each type of payment method in the different branches
sales_file.groupby(['Branch', 'Payment']).agg(amount=('Invoice ID', 'count'))


# In[448]:


plt.figure(figsize=(10, 6))
sns.countplot(x='Branch', hue='Payment', data=sales_file).set_title('Number of customers using each type of payment method at the different branches')
plt.xlabel('Branch')
plt.ylabel('Count')
plt.show()


# In[449]:


#Number of customers using each payment type by gender
sales_file.groupby([ 'Gender', 'Payment']).agg(amount=('Invoice ID', 'count'))


# In[450]:


plt.figure(figsize=(10, 6))
sns.countplot(x='Payment', hue='Gender', data=sales_file).set_title('Number of customers using each payment type by gender')
plt.xlabel('Payment method')
plt.ylabel('Count')
plt.show()


# In[451]:


plt.figure(figsize=(10, 6))
sns.boxenplot(x='Rating', y='Product line', data=sales_file).set_title('Valuation percentile of each product line')


# In[452]:


plt.figure(figsize=(10, 6))
sns.boxenplot(x='Rating', y='Branch', data=sales_file).set_title('Valuation percentile of each branch')


# In[69]:


#Summary
"""
1. Even though more customers bought accessories from beauty, more electronic accessories were sold
and meals
2. Electronic wallets are preferred by the customers, closely matched with cash, unlike with
the credit cards
3. The electronic wallet is preferred in the branch "A" and "B", instead cash is preferred in "C"
4. Women prefer to pay more in cash and less with electronic wallets
5. men prefer to use electronic wallets and less Credit cards
6. Analyzing the percentiles, the products that have the best rating are food and drinks, followed by health and beauty
7. The products in branch "C" have better evaluation, slightly lower is branch "A"
"""


# In[453]:


#Amount of sales per month
sales_file_3 = pd.DataFrame(sales_file.groupby('month')['Quantity'].sum())
sales_file_3= sales_file_3.reset_index()
sales_file_3


# In[454]:


plt.figure(figsize=(10, 6))
sns.barplot(x='month', y='Quantity',data=sales_file_3).set_title('Sales amount per month')


# In[455]:


#Amount of sales for each month for each gender
sales_file_4 = pd.DataFrame(sales_file.groupby(['month', 'Gender'])['Quantity'].sum())
sales_file_4 


# In[456]:


sales_file_4 = sales_file_4.reset_index()
plt.figure(figsize=(10, 6))
sns.barplot(x=sales_file_4['month'], y=sales_file_4['Quantity'], hue=sales_file_4['Gender']).set_title('Amount of sales each month for each gender')


# In[457]:


#Quantity sold of each product line by base per month
sales_file_5 = pd.DataFrame(sales_file.groupby(['Product line', 'month'])['Quantity'].sum())
sales_file_5


# In[458]:


sales_file_5 = sales_file_5.reset_index()
plt.figure(figsize=(10, 6))
plt.xticks(rotation=90)
sns.barplot(x='Product line', y='Quantity', hue='month', data=sales_file_5).set_title('Quantity sold of each product line by base per month')


# In[459]:


#Number of products sold on a daily basis
sales_file_6 = pd.DataFrame(sales_file.groupby('day')['Quantity'].sum())
sales_file_6


# In[460]:


sales_file_6 = sales_file_6.reset_index()
plt.figure(figsize=(10, 6))
sns.barplot(x='day', y='Quantity', data=sales_file_6).set_title('Number of products sold on a daily basis')


# In[461]:


#Number of products sold each day by gender
sales_file_7 = pd.DataFrame(sales_file.groupby(['day', 'Gender'])['Quantity'].sum())
sales_file_7


# In[462]:


sales_file_7 = sales_file_7.reset_index()
plt.figure(figsize=(10, 6))
sns.barplot(x=sales_file_7['day'], y=sales_file_7['Quantity'], hue=sales_file_7['Gender']).set_title('Number of products sold each day by gender')


# In[463]:


#Number of products sold each day by type of customer
sales_file_8 = pd.DataFrame(sales_file.groupby(['day', 'Customer type'])['Quantity'].sum())
sales_file_8


# In[464]:


sales_file_8 = sales_file_8.reset_index()
plt.figure(figsize=(10, 6))
sns.barplot(x='day', y='Quantity', hue='Customer type', data=sales_file_8).set_title('Number of products sold each day by type of customer')


# In[465]:


#Number of products sold each day by type of customer and gender
sales_file_8_1 = pd.DataFrame(sales_file.groupby(['day', 'Customer type','Gender'])['Quantity'].sum())
sales_file_8_1


# In[83]:


#Summary
"""
1. More units were sold in the month of January and fewer in February.
2. Women bought more units in the months: January and February
3. Men bought more units in the month of March
4.In January the product lines that sold the most were (Top 3): Sports and travel, home and lifestyle,
fashion accessories.
5.In February the product lines that sold the most were (Top 3): Food and drink, electronic accessories,
fashion accessories.
6.In March the product lines that sold the most were (Top 3): Home and lifestyle, health and beauty,
electronic accessories.
7.The days that sold the most units were Saturdays, followed by Tuesdays.
8.The days that fewer units were sold were Mondays.
9. Women bought more units than men days: Sunday, Monday, Tuesday, Friday and Saturday.
10. Men bought more units than women days: Wednesday and Thursday
11.Membership users bought more units per day over which are not: Sunday, Monday, Tuesday,
Wednesday and Saturday
12.Users without membership bought more units per day over which the days are: Thursday and Friday.
13.Las Tuesdays, by women who are members was the group that bought the most units (classified by
days of the week, membership and gender)
14. On Sundays women who are members buy more, very similar to what they are.
15. On Mondays women who are members buy more, the same happens on Tuesdays and with a wide difference.
16. On Wednesdays the men who are members are the what they buy the most
17.On Thursdays the men who are members are the ones who more units of products they buy, very even with the
women
18.On Fridays the men who are members are the ones who more units buy, very even with women who do not
they are.
19.On Saturdays the women who are not members are the What more units do they buy?
"""


# In[466]:


#Number of products sold each day by branch
sales_file_9 = pd.DataFrame(sales_file.groupby('Branch')['Quantity'].sum())
sales_file_9


# In[467]:


sales_file_9 = sales_file_9.reset_index()
plt.figure(figsize=(10, 6))
sns.barplot(x='Branch', y='Quantity', data=sales_file_9).set_title('Number of products sold each day by branch')


# In[468]:


#Number of products sold each day by branch categorized by gender
sales_file_10 = pd.DataFrame(sales_file.groupby(['Branch', 'Gender'])['Quantity'].sum())
sales_file_10


# In[469]:


sales_file_10 = sales_file_10.reset_index()
plt.figure(figsize=(10, 6))
sns.barplot(x='Branch', y='Quantity', hue='Gender', data=sales_file_10).set_title('Number of products sold each day by branch categorized by gender')


# In[470]:


#Number of products sold each day by branch categorized by gender and type of customer
sales_file_10_1 = pd.DataFrame(sales_file.groupby(['Branch', 'Customer type','Gender'])['Quantity'].sum())
sales_file_10_1


# In[471]:


#Quantities of each product line depending on the day
sales_file_11 = pd.DataFrame(sales_file.groupby(['day', 'Product line'])['Quantity'].sum())
sales_file_11.head()


# In[472]:


sales_file_11=sales_file_11.reset_index()
plt.figure(figsize=(12,8))
plt.xticks(rotation=90)
sns.barplot(x='day', y='Quantity', hue='Product line', data=sales_file_11).set_title('Quantities of each product line depending on the day')
plt.show()


# In[91]:


#Summary
"""
1. The branch that sold the most units was "A" (all very similar)
2. Men bought more units in the branch "A"
3. Women bought more units in the "B" branches (closely matched) and in the "C" (with wide difference)
4. In branch "A" men who are members were those who bought the most units.
5. In branches "B" and "C" the women who are members were the ones who bought the most.
6. On Mondays more units were sold than product lines (Top 3): Health and beauty, accessories
electronics, home and lifestyle
7. On Tuesdays, more units were sold than product lines (Top 3): Food and beverage, health
and beauty, electronic accessories
8. On Wednesdays, more units of product lines (Top 3): Food and beverage,
sport and travel, fashion accessories
9. On Thursdays, more units were sold than Product Lines (Top 3): Electronic Accessories
(by wide difference), fashion accessories, food
and drink (closely matched with sports and travel)
10. On Fridays, more units of Product Lines (Top 3): Fashion Accessories,
health and beauty, home and lifestyle (much the same with with sports and travel)
11. On Saturdays, more units were sold than product lines (Top 3): Fashion accessories,
sports and travel, electronic accessories
12. On Sundays, more units of Product lines (Top 3):
Home and lifestyle, food and drink, sports and travel (closely matched with electronic accessories)
"""


# In[473]:


#Number of products sold every hour
sales_file_12 = pd.DataFrame(sales_file.groupby('hour')['Quantity'].sum())
sales_file_12


# In[474]:


sales_file_12=sales_file_12.reset_index()
plt.figure(figsize=(10, 6))
sns.barplot(x='hour', y='Quantity', data=sales_file_12).set_title('Number of products sold every hour')


# In[475]:


#Number of products sold per hour for each gender
sales_file_13 = pd.DataFrame(sales_file.groupby(['hour', 'Gender'])['Quantity'].sum())
sales_file_13


# In[476]:


sales_file_13=sales_file_13.reset_index()
plt.figure(figsize=(10, 6))
sns.barplot(x='hour', y='Quantity', hue='Gender',data=sales_file_13).set_title('Number of products sold each hour for each gender')


# In[477]:


#Number of products sold per hour to each type of customer'
sales_file_14 = pd.DataFrame(sales_file.groupby(['hour', 'Customer type'])['Quantity'].sum())
sales_file_14


# In[478]:


sales_file_14=sales_file_14.reset_index()
plt.figure(figsize=(10, 6))
sns.barplot(x='hour', y='Quantity', hue='Customer type',data=sales_file_14).set_title('Number of products sold every hour to each type of customer')


# In[479]:


#Number of products sold per hour per branch
sales_file_15 = pd.DataFrame(sales_file.groupby(['hour', 'Branch'])['Quantity'].sum())
sales_file_15


# In[480]:


sales_file_15=sales_file_15.reset_index()
plt.figure(figsize=(10, 6))
sns.barplot(x='hour', y='Quantity', hue='Branch',data=sales_file_15).set_title('Number of products sold every hour per branch')


# In[481]:


#Number of products sold per hour by product line
sales_file_16 = pd.DataFrame(sales_file.groupby(['Product line', 'hour'])['Quantity'].sum())
sales_file_16.head()


# In[482]:


sales_file_16=sales_file_16.reset_index()
plt.figure(figsize=(14, 10))
sns.barplot(x='Product line', y='Quantity', hue='hour',data=sales_file_16).set_title('Number of products sold per hour by product line')


# In[ ]:


#Summary
"""
Times are rounded (10am - 10:59am) = 10am, (11am - 11:59am) = 11am, ...
1. Schedules that more units are sold are (Top 3): 7:00 p.m., 1:00 p.m., 3:00 p.m. (very similar to 10:00 a.m.)
2. Hours when fewer units are sold are (Top 3): 8:00 p.m., 5:00 p.m., 4:00 p.m.
3. Hours in which women buy more units (Top 3): 1 p.m., 7 p.m., 10 a.m. (same as 11 a.m.)
4. Hours in which women have fewer units buy (Top 3): 8:00 p.m., 6:00 p.m., 4:00 p.m.
5. Hours in which men drive the most buy (Top 3:): 7:00 p.m., 3:00 p.m., 6:00 p.m. (very even with 2:00 p.m.)
6. Hours in which men less units buy (Top 3:): 5pm, 1pm, 4pm
7. Hours in which the members have the most units buy (Top 3:): 7:00 p.m., 3:00 p.m., 1:00 p.m.
8. Hours in which the members less units buy (Top 3:): 4:00 p.m., 8:00 p.m., 10:00 a.m.
9. Hours when normal customers most units buy (Top 3:): 10am, 1pm, 7pm
10. Hours when normal customers less units buy (Top 3:): 5:00 p.m., 8:00 p.m., even with 3 pm
11. Hours when branch customers "A" more units buy (Top 3:): 3:00 p.m., 10:00 a.m., 12 noon (very even with 11 o'clock)
12. Hours when branch customers "A" fewer units buy (Top 3:): 2:00 p.m., 8:00 p.m., 5:00 p.m.
13. Hours when branch customers "B" more units buy (Top 3:): 7:00 p.m., 2:00 p.m., tied with 1:00 p.m.
14. Hours when branch customers "B" fewer units buy (Top 3:): 4:00 p.m., 5:00 p.m., 8:00 p.m.
15. Hours when branch customers "C" more units buy (Top 3:): 7:00 p.m., 1:00 p.m., 10:00 a.m.
16. Hours when branch customers "C" fewer units buy (Top 3:): 11am, 6:00 p.m., 3:00 p.m.
17. Hours when more accessories are sold Electronic (Top 3): 7:00 p.m., 6:00 p.m., 11:00 a.m.
18. Times when fewer accessories are sold Electronic (Top 3): 4:00 p.m., 1:00 p.m., 5:00 p.m. (very even with 2:00 p.m.)
19. Hours in which more accessories are sold Fashion (Top 3): 1:00 p.m., 7:00 p.m., 6:00 p.m.
20. Times when fewer accessories are sold Fashion (Top 3): 5:00 p.m., 8:00 p.m., 3:00 p.m.
21. Hours in which more food is sold and drink (Top 3): 7:00 p.m., 3:00 p.m., 8:00 p.m.
22. Times when less food is sold and Drink (Top 3): 5:00 p.m., 12:00 p.m., 1:00 p.m.
23. Hours in which more products are sold health and beauty (Top 3): 2:00 p.m., 1:00 p.m., 7:00 p.m.
24. Times when fewer products are sold health and beauty (Top 3): 4:00 p.m., 5:00 p.m., 3:00 p.m.
25. Hours in which more products are sold home and lifestyle (Top 3): 5:00 p.m., 11:00 a.m., 1:00 p.m.
26. Hours when fewer products are sold home and lifestyle (Top 3): 8pm, 2pm, 4pm
27. Hours in which more products are sold sports and travel (Top 3): 7:00 p.m., 1:00 p.m., 12:00 p.m.
28. Times when fewer products are sold sports and travel (Top 3): 8:00 p.m., 5:00 p.m., 6:00 p.m.
"""


# In[483]:


# Quantities of each product line sold to each type of customer 
sales_file_17 = pd.DataFrame(sales_file.groupby(['Customer type', 'Product line'])['Quantity'].sum())
sales_file_17


# In[484]:


sales_file_17 = sales_file_17.reset_index()
plt.figure(figsize=(10, 6))
plt.xticks(rotation=90)
sns.barplot(x='Product line', y='Quantity', hue='Customer type', data=sales_file_17).set_title('Quantities of each product line sold to each type of customer')


# In[485]:


# Quantities of each product line sold to each gender
sales_file_18 = pd.DataFrame(sales_file.groupby(['Gender', 'Product line'])['Quantity'].sum())
sales_file_18


# In[486]:


sales_file_18 = sales_file_18.reset_index()
plt.figure(figsize=(10, 6))
plt.xticks(rotation=90)
sns.barplot(x='Product line', y='Quantity', hue='Gender', data=sales_file_18).set_title('Quantities of each product line sold to each gender')


# In[487]:


#Quantities of each product line sold by payment method
sales_file_19 = pd.DataFrame(sales_file.groupby(['Payment', 'Product line'])['Quantity'].sum())
sales_file_19


# In[488]:


sales_file_19 = sales_file_19.reset_index()
plt.figure(figsize=(10, 6))
plt.xticks(rotation=90)
sns.barplot(x='Product line', y='Quantity', hue='Payment', data=sales_file_19).set_title('Quantities of each product line sold by payment method')


# In[489]:


#Quantities of each product line sold in each branch
sales_file_20 = pd.DataFrame(sales_file.groupby(['Branch', 'Product line'])['Quantity'].sum())
sales_file_20


# In[490]:


sales_file_20 = sales_file_20.reset_index()
plt.figure(figsize=(10, 6))
plt.xticks(rotation=90)
sns.barplot(x='Product line', y='Quantity', hue='Branch', data=sales_file_20).set_title('Quantities of each product line sold in each branch')


# In[491]:


#Quantity sold based on valuation (rounded)
product_lines = ['Electronic accessories', 'Fashion accessories', 'Sports and travel', 'Home and lifestyle', 'Food and beverages', 'Health and beauty']
sales_rating = sales_file.round()
for line in product_lines:
    sales_line_3 = sales_rating[sales_rating['Product line']==line]
    sales_amount_rating_product_line = pd.DataFrame(sales_line_3.groupby('Rating')['Quantity'].sum())
    sales_amount_rating_product_line = sales_amount_rating_product_line.reset_index()
    print(f'Quantity sold based on the valuation of the product line: {line}')
    plt.figure(figsize=(6,4))
    sns.barplot(x = 'Rating', y = 'Quantity',data = sales_amount_rating_product_line)
    plt.show()


# In[ ]:


#Summary
"""
1. Product lines that most members units buy (Top 3): food and beverages, sports and travel, home and lifestyle
2. Product lines than normal customers most units buy (Top 3): electronic accesories (by wide difference), fashion 
accessories, food and beverages
3. Product lines that men most units buy (Top 3): health and beauty, electronic accessories, food and beverages
4. Product lines that women most units buy (Top 3): fashion accesories, food and beverages, home and lifestyle
5. Product lines that are most purchased with electronic wallet (Top 3): home and lifestyle, fashion accessories, food
and beverages
6. Product lines that are most purchased with banknotes (Top 3): electronic accesories
(by wide difference), sports and travel, home and lifestyle
7. Product lines that are most purchased with credit cards (Top 3): food and beverages, sports and travel,
fashion accessories
8. Product lines that are most purchased in the branch "A" (Top 3): home and lifestyle, sports and travel, 
electronic accessories
9. Product lines that are most purchased in the branch "B" (Top 3): sports and travel,
health and beauty, electronic accessories
10. Lines of products that are most purchased in the branch "C" (Top 3): food and beverages,
fashion accessories, electronic accessories
11. Considering the assessment given by the customers about electronic accessories,
those who reached their highest points of quantities sold were those with 6 and 8
valuation#Considering the valuation they gave customers about accessories
electronics, which reached their highest points low quantities sold were those that
they have 10 and 4 valuation
12. Considering the assessment given by the customers about fashion accessories,
those who reached their highest points of quantities sold were those with 7 and 6 valuation
13. Considering the assessment given by the customers about fashion accessories,
those who reached their lowest points of c quantities sold were those with 4 and 10 rating
14. Considering the assessment given by the customers about sport products
and journey, those who reached their highest points of quantities sold high were the
who have 7 and 6 valuation
15. Considering the assessment given by the customers about sport products
and journey, those who reached their lowest points of quantities sold were low
who have 10 and 9 valuation
16. Considering the assessment given by the customers about household products and
lifestyle, those who reached their points highest in quantities sold were the
who have 8 and 7 valuation
17. Considering the assessment given by the customers about household products and
lifestyle, those who reached their points lowest in quantities sold were the who have 10 and 4 valuation
18. Considering the assessment given by the customers about food and drink,
that reached their highest points of amounts sold were those with 6 and 8 of assessment
19. Considering the assessment given by the customers about food and drink,
that reached their lowest points of amounts sold were those with 10 and 5 of assessment
20. Considering the assessment given by the customers about health products and
beauty, those who reached their highest points of quantities sold were those that they have 8 and 6 valuation
21. Considering the assessment given by the customers about health products and
beauty, those who reached their lowest points of quantities sold were those that they have 10 and 4 valuation
"""


# In[492]:


#Billing based on branch
sales_file_branch = pd.DataFrame(sales_file.groupby('Branch')['Total'].sum())
sales_file_branch = sales_file_branch.reset_index()
sales_file_branch


# In[493]:


plt.figure(figsize=(10, 6))
sns.barplot(x='Branch', y='Total', data=sales_file_branch).set_title('Billing based on branch')
plt.show()


# In[494]:


#Billing based on gender 
sales_file_gender = pd.DataFrame(sales_file.groupby('Gender')['Total'].sum())
sales_file_gender = sales_file_gender.reset_index()
sales_file_gender


# In[496]:


plt.figure(figsize=(10, 6))
sns.barplot(x='Gender', y='Total', data=sales_file_gender).set_title('Billing based on gender')


# In[497]:


#Billing based on the type of client
sales_file_customer_type = pd.DataFrame(sales_file.groupby('Customer type')['Total'].sum())
sales_file_customer_type = sales_file_customer_type.reset_index()
sales_file_customer_type 


# In[498]:


plt.figure(figsize=(10, 6))
sns.barplot(x='Customer type', y='Total', data=sales_file_customer_type).set_title('#Billing based on the type of client')


# In[499]:


#To determine on which dates each day of the week
days = ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday']
for day in days:
    if day == 'Sunday':
        sales_d = sales_file[sales_file['day']==day] 
        sales_d = pd.DataFrame(sales_d.groupby('Date')['Total'].sum())
        sales_d = sales_d.reset_index()
        sunday_dates = sales_d
    elif day == 'Monday':
        sales_d = sales_file[sales_file['day']==day] 
        sales_d = pd.DataFrame(sales_d.groupby('Date')['Total'].sum())
        sales_d = sales_d.reset_index()
        monday_dates = sales_d
    elif day == 'Tuesday':
        sales_d = sales_file[sales_file['day']==day] 
        sales_d = pd.DataFrame(sales_d.groupby('Date')['Total'].sum())
        sales_d = sales_d.reset_index()
        tuesday_dates = sales_d  
    elif day == 'Wednesday':
        sales_d = sales_file[sales_file['day']==day] 
        sales_d = pd.DataFrame(sales_d.groupby('Date')['Total'].sum())
        sales_d = sales_d.reset_index()
        wednesday_dates = sales_d 
    elif day == 'Thursday':
        sales_d = sales_file[sales_file['day']==day] 
        sales_d = pd.DataFrame(sales_d.groupby('Date')['Total'].sum())
        sales_d = sales_d.reset_index()
        thursday_dates = sales_d
    elif day == 'Friday':
        sales_d = sales_file[sales_file['day']==day] 
        sales_d = pd.DataFrame(sales_d.groupby('Date')['Total'].sum())
        sales_d = sales_d.reset_index()
        friday_dates = sales_d 
    else:
        sales_d = sales_file[sales_file['day']==day] 
        sales_d = pd.DataFrame(sales_d.groupby('Date')['Total'].sum())
        sales_d = sales_d.reset_index()
        saturday_dates = sales_d


# In[500]:


print('Dates that were Sunday and billing for those dates:')
sunday_dates


# In[501]:


plt.figure(figsize=(10,6))
sns.lineplot(x = 'Date', y = 'Total', data = sunday_dates).set_title('Dates that were Sunday and billing for those dates:')


# In[502]:


print('Dates that were Monday and billing for those dates:')
monday_dates 


# In[503]:


plt.figure(figsize=(10,6))
sns.lineplot(x = 'Date', y = 'Total', data = monday_dates).set_title('Dates that were Monday and billing for those dates:')


# In[504]:


print('Dates that were Tuesday and billing for those dates:')
tuesday_dates 


# In[505]:


plt.figure(figsize=(10,6))
sns.lineplot(x = 'Date', y = 'Total', data = tuesday_dates).set_title('Dates that were Tuesday and billing for those dates:')


# In[506]:


print('Dates that were Wednesdays and billing for those dates:')
wednesday_dates


# In[507]:


plt.figure(figsize=(10,6))
sns.lineplot(x = 'Date', y = 'Total', data = wednesday_dates).set_title('Dates that were Wednesdays and billing for those dates:")


# In[508]:


print('Dates that were Thursday and billing for those dates:')
thursday_dates


# In[509]:


plt.figure(figsize=(10,6))
sns.lineplot(x = 'Date', y = 'Total', data = thursday_dates).set_title('Dates that were Thursday and billing for those dates:')


# In[510]:


print('Dates that were Friday and billing for those dates:')
friday_dates


# In[511]:


plt.figure(figsize=(10,6))
sns.lineplot(x = 'Date', y = 'Total', data = friday_dates).set_title('Dates that were Friday and billing for those dates:')


# In[512]:


print('Dates that were Saturday and billing for those dates:')
saturday_dates


# In[513]:


plt.figure(figsize=(10,6))
sns.lineplot(x = 'Date', y = 'Total', data = saturday_dates).set_title('Dates that were Saturday and billing for those dates:')


# In[514]:


#Billing based on date 
sales_file_date = pd.DataFrame(sales_file.groupby('Date')['Total'].sum())
sales_file_date = sales_file_date.reset_index()
sales_file_date.head()


# In[515]:


plt.figure(figsize=(14,10))
sns.lineplot(x = 'Date', y = 'Total', data = sales_file_date).set_title('#Billing based on date')


# In[516]:


#Billing based on the date (of each branch)
Branch = ['A', 'B', 'C']
for branch in Branch:
    sales_branch = sales_file[sales_file['Branch']==branch]
    sales_file_date_branch = pd.DataFrame(sales_branch.groupby(['Branch', 'Date'])['Total'].sum())
    sales_file_date_branch = sales_file_date_branch.reset_index()
    print(f'Billing of {branch} based on the date ')
    plt.figure(figsize=(12,8))
    sns.lineplot(x = 'Date', y = 'Total',data = sales_file_date_branch)
    plt.show()


# In[517]:


#Billing based on the hour
sales_file_hour = pd.DataFrame(sales_file.groupby('hour')['Total'].sum())
sales_file_hour = sales_file_hour.reset_index()
sales_file_hour


# In[518]:


plt.figure(figsize=(10,6))
sns.lineplot(x = 'hour', y = 'Total', data = sales_file_hour).set_title('Billing based on the hour')


# In[519]:


#Billing based on the day
sales_file_day = pd.DataFrame(sales_file.groupby('day')['Total'].sum())
sales_file_day


# In[520]:


sales_file_day = sales_file_day.reset_index()
plt.figure(figsize=(10,6))
sns.lineplot(x = 'day', y = 'Total', data = sales_file_day).set_title('Billing based on the day')


# In[521]:


#Billing based on the hour (for each branch)
for branch in Branch:
    sales_branch = sales_file[sales_file['Branch']==branch]
    sales_billing_hour_branch = pd.DataFrame(sales_branch.groupby(['Branch', 'hour'])['Total'].sum())
    sales_billing_hour_branch = sales_billing_hour_branch.reset_index()
    print(f'Billing of branch {branch} per hour')
    plt.figure(figsize=(12,8))
    sns.lineplot(x = 'hour', y = 'Total',data = sales_billing_hour_branch)
    plt.show()


# In[522]:


#Billing based on the day (of each branch)
for branch in Branch:
    sales_branch = sales_file[sales_file['Branch']==branch]
    sales_billing_day_branch = pd.DataFrame(sales_branch.groupby('day')['Total'].sum())
    sales_billing_day_branch = sales_billing_day_branch.reset_index()
    print(f'Billing of branch {branch} per branch')
    plt.figure(figsize=(12,8))
    sns.lineplot(x ='day', y = 'Total',data = sales_billing_day_branch)
    plt.show()


# In[523]:


#Billing obtained from each product line based on time
for line in product_lines:
    sales_line_2 = sales_file[sales_file['Product line']==line]
    sales_billing_hour_line = pd.DataFrame(sales_line_2.groupby(['Product line', 'hour'])['Total'].sum())
    sales_billing_hour_line = sales_billing_hour_line.reset_index()
    print(f'Billing of {line} per hour')
    plt.figure(figsize=(6,4))
    sns.lineplot(x = 'hour', y = 'Total',data = sales_billing_hour_line)
    plt.show()


# In[524]:


#Billing based on the product line
sales_product_line_total = pd.DataFrame(sales_file.groupby('Product line')['Total'].sum())
sales_product_line_total = sales_product_line_total.reset_index()
sales_product_line_total


# In[526]:


plt.figure(figsize=(10,6))
plt.xticks(rotation=90)
sns.barplot(x = 'Product line', y = 'Total', data = sales_product_line_total).set_title('Billing based on the product line')


# In[527]:


#Billing based on the type of product (classified by branches)
for branch in Branch:
    sales_branch = sales_file[sales_file['Branch']==branch]
    sales_billing_product_line_branch = pd.DataFrame(sales_branch.groupby('Product line')['Total'].sum())
    sales_billing_product_line_branch = sales_billing_product_line_branch.reset_index()
    print(f'Billing of each product lines based on branch {branch}')
    plt.figure(figsize=(12,8))
    sns.lineplot(x ='Product line', y = 'Total',data = sales_billing_product_line_branch)
    plt.show()


# In[528]:


#Billing based on the valuation of each product line
for line in product_lines:
    sales_line_3 = sales_rating[sales_rating['Product line']==line]
    sales_billing_rating_product_line = pd.DataFrame(sales_line_3.groupby('Rating')['Total'].sum())
    sales_billing_rating_product_line = sales_billing_rating_product_line.reset_index()
    print(f'Billing of {line} based on rating')
    plt.figure(figsize=(6,4))
    sns.lineplot(x = 'Rating', y = 'Total',data = sales_billing_rating_product_line)
    plt.show()


# In[529]:


#Billing by payment
sales_billing_per_payment_method = sales_file.groupby(['Payment'])['Total'].sum()
sales_billing_per_payment_method


# In[530]:


plt.figure(figsize=(14, 10))
sales_billing_per_payment_method.plot(kind='pie', autopct='%1.1f%%').set_title('Billing by payment')


# In[ ]:


#Summary
"""
1. Branch 'C' was the one that invoiced the most in the 3 months and the one that did the least was 'B'
2. Women were the highest spenders among all branches during the 3 months
3. Without being a situation that occurs in all cases, turnover tends to be higher
in the next few days in the middle of the month and the end of this
4. The days that were billed the most were Saturdays, followed by Tuesdays
5. The days that were billed the least were Monday, followed by Wednesdays
6. In branch 'A' more was invoiced in the 4:00 p.m. and 11:00 a.m. hours.
7. Branch 'A' billed less in the 6:00 p.m. and 2:00 p.m. hours.
8. In the branch 'B' more was invoiced in the 7:00 p.m. and 2:00 p.m. hours.
9. Branch 'B' billed less in the 4:00 p.m. and 12:00 p.m. hours.
10. In branch 'C' more was invoiced in the hours of 7:00 p.m. and 1:00 p.m.
11. Branch 'C' billed less in the 5:00 p.m. and 12:00 p.m. hours.
12. Branch 'A' billed more in the days sundays and saturdays.
13. Branch 'A' billed less in the days Wednesday and Monday.
14. In the branch 'B' more was invoiced in the days saturdays and tuesdays.
15. In branch 'B' less was invoiced in the days sundays and wednesdays.
16. In branch 'C' more was invoiced in the Saturdays and Wednesdays (very even with Tuesdays).
17. In branch 'C' billed less in the days Monday and Thursday.
18. Electronic accessories reached their highest billing points 6:00 p.m. and 11:00 a.m. (but containing various peaks)
19. Electronic accessories reached their lowest billing points 12 noon and 4 p.m.
20. Fashion accessories hit their spots highest billing at 12 noon and 10 a.m. (very close to 7 p.m.)
21. Fashion accessories hit their spots lowest billing at 3:00 p.m. and 5:00 p.m.
22. Sports and travel products reached your highest billing points at 7:00 p.m. and at 1:00 p.m.
23. Sports and travel products reached their lowest billing points at 6:00 p.m. and at 11 a.m.
24. Home and lifestyle products reached their highest points of billing at 5:00 p.m. and 11:00 a.m. (very closely they are 1:00 p.m. and 3:00 p.m.)
25. Home and lifestyle products reached their lowest billing points at 2:00 p.m. and at 6:00 p.m.
26. Food and beverage products reached their highest billing points at 7:00 p.m. and at 3:00 p.m.
27. Food and beverage products reached their lowest billing points at 5:00 p.m. and at 1:00 p.m.
28. Health and beauty products reached their highest billing points at 2:00 p.m. and at 1:00 p.m.
29. Health and beauty products reached their lowest billing points at 4:00 p.m. and 11:00 a.m.
30. The product line that invoiced the most money was that of food and drink (very closely that of sports and trips)
31. The product line that invoiced less money was health and beauty
32. At branch 'A', the product lines that most billed were: home and lifestyle, sports and travel
33. At branch 'A', the product lines that least invoiced were: health and beauty, beauty accessories
34. At branch 'B', the product lines that most billed were: sports and travel, health and lifestyle life
35. At branch 'B', the product lines that least invoiced were: food and drink, fashion accessories
36. At branch 'C', the product lines that most invoiced were: food and drink, fashion accessories
37. At branch 'C', the product lines that least billed were: home and lifestyle, sports and travel
38. Considering the feedback given by customers about electronic accessories, which reached
their highest billing points were the that have 6 and 5 valuation
39. Considering the feedback given by customers about accessories electronics, which reached their lowest points
billing were those with 10 and 4 valuation
40. Considering the feedback given by customers about accessories
fashion, those who reached their highest points of billing were the ones they have 7 and 8 valuation
41. Considering the feedback given by customers about accessories
fashion, those who reached their lowest points were those with 4 and 10 (very even with those with 5) rating
42. Considering the assessment given by the customers about the products
sport and travel, those who reached their points highest billing were the who have 6 and 7 valuation
43. Considering the assessment given by the customers about the products sport and travel, those who reached their 
points lowest billing were the that have 8 and 10 valuation
44. Considering the assessment given by the customers about the products
home and lifestyle, those who achieved their highest billing points were
those who have 5 and 8 (very even with those of 7) valuation
45. Considering the assessment given by the customers about household products
and lifestyle, those who reached their points lowest billing were those who they have 10 and 9 valuation
46. ​​Considering the feedback given by customers about food and drink,
those who reached their highest billing points were those with 9 and 8 (very closely those with 6) valuation
47. Considering the feedback given by customers about food and drink
that reached their lowest billing points were those who have 10 and 7 (very close those with 5) rating
48. Considering the feedback given by customers about health products
and beauty, those who reached their highest points of billing were those with 8 and 9 valuation
49. Considering the feedback given by customers about health products
and beauty, those who reached their lowest points of billing were those with 10 and 7 rating
50. The method of payment for which the most was billed was cash and the least was by credit card
"""


# In[531]:


#Income by gender 
sales_file_gender_income = pd.DataFrame(sales_file.groupby('Gender')['gross income'].sum())
sales_file_gender_income


# In[532]:


sales_file_gender_income.plot(kind='pie',y='gross income',autopct='%1.1f%%').set_title('Income by gender ')


# In[533]:


#Income per branch
sales_file_branch_income = sales_file.groupby('Branch')['gross income'].sum()
sales_file_branch_income


# In[534]:


plt.figure(figsize=(10, 6))
sales_file_branch_income.plot(kind='pie',y='gross income',autopct='%1.1f%%').set_title('Income per branch')
plt.show()


# In[535]:


#Income per customer type
sales_file_customer_type_income = sales_file.groupby('Customer type')['gross income'].sum()
sales_file_customer_type_income


# In[536]:


plt.figure(figsize=(10, 6))
sales_file_customer_type_income.plot(kind='pie',y='gross income',autopct='%1.1f%%').set_title('Income per customer type')
plt.show()


# In[537]:


#Income per date 
sales_income_date = pd.DataFrame(sales_file.groupby(['Date'])['gross income'].sum())
sales_income_date = sales_income_date.reset_index()
plt.figure(figsize=(12,8))
sns.lineplot(x = 'Date', y = 'gross income',data = sales_income_date).set_title('Income per date')


# In[538]:


#Income based on date (for each branch)
Branch = ['A', 'B', 'C']
for branch in Branch:
    sales_branch = sales_file[sales_file['Branch']==branch]
    sales_income_date_branch = pd.DataFrame(sales_branch.groupby(['Branch', 'Date'])['gross income'].sum())
    sales_income_date_branch = sales_income_date_branch.reset_index()
    print(f'Income of branch {branch} based on date')
    plt.figure(figsize=(12,8))
    sns.lineplot(x = 'Date', y = 'gross income',data = sales_income_date_branch)
    plt.show()


# In[539]:


#Income per day
sales_income_per_day = sales_file.groupby(['day'])['gross income'].sum()
sales_income_per_day


# In[540]:


plt.figure(figsize=(14,10))
sales_income_per_day.plot(kind='pie', autopct='%1.1f%%').set_title('Income per day')


# In[541]:


#Income based on the day (of each branch)
for branch in Branch:
    sales_branch = sales_file[sales_file['Branch']==branch]
    income_per_day_and_branch = sales_branch.groupby('day')['gross income'].sum()
    print(f'Income of branch {branch} per day')
    plt.figure(figsize=(14,10))
    income_per_day_and_branch.plot(kind='pie', autopct='%1.1f%%')
    plt.show()


# In[542]:


#Income of each product line based on the day
for line in product_lines:
    sales_line = sales_file[sales_file['Product line']==line]
    income_per_day_and_line = sales_line.groupby('day')['gross income'].sum()
    print(f'Income of {line} per day')
    plt.figure(figsize=(8,6))
    income_per_day_and_line.plot(kind='pie', autopct='%1.1f%%')
    plt.show()


# In[311]:


#Income per hour
sales_income_hour = sales_file.groupby('hour')['gross income'].sum()
sales_income_hour


# In[312]:


plt.figure(figsize=(10,6))
sales_income_hour.plot(kind='pie', autopct='%1.1f%%').set_title('Income per hour')
plt.show()


# In[543]:


#Income based on the hour (of each branch)
for branch in Branch:
    sales_branch = sales_file[sales_file['Branch']==branch]
    sales_income_hour_branch = sales_branch.groupby('hour')['gross income'].sum()
    print(f'Income of branch {branch} pero hour')
    plt.figure(figsize=(10,6))
    sales_income_hour_branch.plot(kind='pie', autopct='%1.1f%%')
    plt.show()


# In[544]:


#Profit obtained from each product line based on the hour
for line in product_lines:
    sales_line_2 = sales_file[sales_file['Product line']==line]
    sales_income_hour_line = sales_line_2.groupby('hour')['gross income'].sum()
    print(f'Income of {line} per hour')
    plt.figure(figsize=(8,6))
    sales_income_hour_line.plot(kind='pie', autopct='%1.1f%%')
    plt.show()


# In[545]:


#Income per payment method
sales_income_per_payment_method = sales_file.groupby(['Payment'])['gross income'].sum()
sales_income_per_payment_method


# In[546]:


plt.figure(figsize=(14, 10))
sales_income_per_payment_method.plot(kind='pie', autopct='%1.1f%%').set_title('Income per payment method')


# In[547]:


#Income per product line
sales_income_per_product_line = sales_file.groupby(['Product line'])['gross income'].sum()
sales_income_per_product_line


# In[548]:


plt.figure(figsize=(12, 8))
sales_income_per_product_line.plot(kind='pie', autopct='%1.1f%%').set_title('Income per product line')


# In[549]:


#Income based on the rating of each product line
for line in product_lines:
    sales_line_3 = sales_rating[sales_rating['Product line']==line]
    sales_income_rating_product_line = sales_line_3.groupby('Rating')['gross income'].sum()
    print(f'Income of {line} based on the rating')
    plt.figure(figsize=(8,6))
    sales_income_rating_product_line.plot(kind='pie', autopct='%1.1f%%')
    plt.show()


# In[ ]:


#Summary
"""
1. What is analyzed in this section is the same as in the billing section, but with another graph style
To better visualize the percentage that represents each value
"""


# In[ ]:


#Recommendations
"""
1. The valuation does not tend to be very high, it is product quality needs to be improved or services
2. Wholesale purchase offers can be made, among other activities on the days
fewer people attend branches, thus attracting more clients
3. If we manage to increase the quality of our products we could try to upload in certain
grade the prices, well get more profit
4. After analyzing the tastes of men and women Regarding the product lines we can
conclude that it is the women you prefer accessories of fashion and men health and beauty,
but in turn the least popular among women are health and beauty products, this
can happen because of the offers that are offered and to whom advertising is targeted, etc. Would
interesting to try to add advertising or offers to the other gender, in this way we would have
more potential customers.
5. It is necessary to consider for the following analyzes customer service, so we'll see if
the rating given by customers is not affected by this.
6. Start implementing strategies such as increasing the size of the shopping carts,
more strategically place products, implement home delivery, among others, which
are ways to increase sales in supermarkets and then analyze its impact on the business.
"""

